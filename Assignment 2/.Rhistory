par(mfrow=c(1,1))
#Fig 3
x<-sort(rnorm(25))
y<-2+3*x+rnorm(25)
plot(x,y)
mm<-lm(y~x)
mm2<-3+2*x
lines(x,mm$fit,lwd=2,col=2)
lines(x,mm2,col=4)
for (zz in (1:length(x))) {
lines(rep(x[zz],2),c(y[zz],mm$fit[zz])) ## plotting the vertical distance to the model = deviations
lines(rep(x[zz],2),c(y[zz],mm2[zz]),lty=2) }
par(mfrow=c(1,1))
#Fig 3
x<-sort(rnorm(25))
y<-2+3*x+rnorm(25)
plot(x,y)
mm<-lm(y~x)
mm2<-3+2*x
lines(x,mm$fit,lwd=2,col=2)
lines(x,mm2,col=4)
for (zz in (1:length(x))) {
lines(rep(x[zz],2),c(y[zz],mm$fit[zz])) ## plotting the vertical distance to the model = deviations
lines(rep(x[zz],2),c(y[zz],mm2[zz]),lty=2) }
par(mfrow=c(1,1))
#Fig 3
x<-sort(rnorm(25))
y<-2+3*x+rnorm(25)
plot(x,y)
mm<-lm(y~x)
mm2<-3+2*x
lines(x,mm$fit,lwd=2,col=2)
lines(x,mm2,col=4)
for (zz in (1:length(x))) {
lines(rep(x[zz],2),c(y[zz],mm$fit[zz])) ## plotting the vertical distance to the model = deviations
lines(rep(x[zz],2),c(y[zz],mm2[zz]),lty=2) }
par(mfrow=c(1,1))
#Fig 3
x<-sort(rnorm(25))
y<-2+3*x+rnorm(25)
plot(x,y)
mm<-lm(y~x)
mm2<-3+2*x
lines(x,mm$fit,lwd=2,col=2)
lines(x,mm2,col=4)
for (zz in (1:length(x))) {
lines(rep(x[zz],2),c(y[zz],mm$fit[zz])) ## plotting the vertical distance to the model = deviations
lines(rep(x[zz],2),c(y[zz],mm2[zz]),lty=2) }
par(mfrow=c(2,2))
#Fig 4a
x<-sort(rnorm(50))
y1<-2+3*x+rnorm(50)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,2+3*x,lwd=2,col=2)
#Fig 4b
y2<-y1
y2[26:50]<-rnorm(25,sd=.5) ## creating a subgroup in the data
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x[1:25],2+3*x[1:25],col=2,lwd=2)
lines(x[26:50],rep(0,25),col=2,lwd=2)
#Fig 4c
y3<-1+2*x-x^2+rnorm(50) ## true model is quadratic
plot(x,y3)
lines(x,lm(y3~x)$fit)
lines(x,1+2*x-x^2,col=2,lwd=2)
###################################################
### code chunk number 11: b2a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### code chunk number 12: b2b
###################################################
y2<-10+3*x+(rchisq(50,1))
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### code chunk number 11: b2a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### code chunk number 12: b2b
###################################################
y2<-10+3*x+(rchisq(50,1))
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
par(mfrow=c(2,2))
###################################################
### code chunk number 11: b2a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### code chunk number 12: b2b
###################################################
y2<-10+3*x+(rchisq(50,1))
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### code chunk number 13: b2c
###################################################
#y2<-10+3*x+(rchisq(50,1))
#plot(x,y2)
#lines(x,lm(y2~x)$fit)
#lines(x,10+3*x,col=2,lwd=2)
#lines(x,exp(lm(log(y2)~x)$fit),lty=2)
###################################################
### code chunk number 14: b2d
###################################################
#y2<-10+3*x+(rchisq(50,1))
#plot(x,log(y2))
#lines(x,log(10+3*x),col=2,lwd=2)
#lines(x,(lm(log(y2)~x)$fit))
par(mfrow=c(1,1))
###################################################
### Fig 5a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 5b
###################################################
y2<-10+3*x+(rchisq(50,1))
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
par(mfrow=c(2,1))
###################################################
### Fig 5a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 5b
###################################################
y2<-10+3*x+(rchisq(50,1))
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6a
###################################################
x<-sort(rnorm(100))
for (kk in (1:25)) {
y1<-10+3*x+rnorm(100,sd=2)
if (kk==1) {plot(x,y1)}
lines(x,lm(y1~x)$fit) }
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6b
###################################################
for (kk in (1:25)) {
y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100)) ## creating a data set with increasing error variance
if (kk==1) {plot(x,y2)}
lines(x,lm(y2~x)$fit) }
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6c
###################################################
y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100))
plot(x,(y2))
###################################################
### Fig 6d
###################################################
#y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100)) ## taking logs to try to even out the variance
plot(x,log(y2))
par(mfrow=c(2,2))
###################################################
### Fig 5a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 5b
###################################################
y2<-10+3*x+(rchisq(50,1))
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6a
###################################################
x<-sort(rnorm(100))
for (kk in (1:25)) {
y1<-10+3*x+rnorm(100,sd=2)
if (kk==1) {plot(x,y1)}
lines(x,lm(y1~x)$fit) }
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6b
###################################################
for (kk in (1:25)) {
y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100)) ## creating a data set with increasing error variance
if (kk==1) {plot(x,y2)}
lines(x,lm(y2~x)$fit) }
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6c
###################################################
y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100))
plot(x,(y2))
###################################################
### Fig 6d
###################################################
#y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100)) ## taking logs to try to even out the variance
plot(x,log(y2))
par(mfrow=c(2,2))
###################################################
### Fig 6a
###################################################
x<-sort(rnorm(100))
for (kk in (1:25)) {
y1<-10+3*x+rnorm(100,sd=2)
if (kk==1) {plot(x,y1)}
lines(x,lm(y1~x)$fit) }
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6b
###################################################
for (kk in (1:25)) {
y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100)) ## creating a data set with increasing error variance
if (kk==1) {plot(x,y2)}
lines(x,lm(y2~x)$fit) }
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 6c
###################################################
y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100))
plot(x,(y2))
###################################################
### Fig 6d
###################################################
#y2<-10+3*x+rnorm(100,sd=seq(.1,6,length.out=100)) ## taking logs to try to even out the variance
plot(x,log(y2))
# OUTLIERS ########################################
###################################################
### Fig 7a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50,sd=2)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 7b
###################################################
xnew<-x
xnew[50]<-xnew[50]+10  ## creating an extreme x-value
y2<-10+3*xnew+rnorm(50,sd=2)
plot(xnew,y2)
lines(xnew,lm(y2~xnew)$fit)
lines(xnew,10+3*xnew,col=2,lwd=2)
points(xnew[50],y2[50],pch=8,col=2)
###################################################
### Fig 7c
###################################################
y2<-10+3*x+rnorm(50,sd=2)
y2[50]<-y2[50]-20  ## creating an extreme y-value for an extreme x
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
points(x[50],y2[50],pch=8,col=2)
###################################################
### Fig 7d
###################################################
y2<-10+3*x+rnorm(50,sd=2)
y2[20]<-y2[20]-15 ## creating an extreme y-value for an x near mean(x)
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
points(x[20],y2[20],pch=8,col=2)
par(mfrow=c(2,2))
# OUTLIERS ########################################
###################################################
### Fig 7a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50,sd=2)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 7b
###################################################
xnew<-x
xnew[50]<-xnew[50]+10  ## creating an extreme x-value
y2<-10+3*xnew+rnorm(50,sd=2)
plot(xnew,y2)
lines(xnew,lm(y2~xnew)$fit)
lines(xnew,10+3*xnew,col=2,lwd=2)
points(xnew[50],y2[50],pch=8,col=2)
###################################################
### Fig 7c
###################################################
y2<-10+3*x+rnorm(50,sd=2)
y2[50]<-y2[50]-20  ## creating an extreme y-value for an extreme x
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
points(x[50],y2[50],pch=8,col=2)
###################################################
### Fig 7d
###################################################
y2<-10+3*x+rnorm(50,sd=2)
y2[20]<-y2[20]-15 ## creating an extreme y-value for an x near mean(x)
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
points(x[20],y2[20],pch=8,col=2)
par(mfrow=c(2,2))
# OUTLIERS ########################################
###################################################
### Fig 7a
###################################################
x<-sort(rnorm(50))
y1<-10+3*x+rnorm(50,sd=2)
plot(x,y1)
lines(x,lm(y1~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
###################################################
### Fig 7b
###################################################
xnew<-x
xnew[50]<-xnew[50]+10  ## creating an extreme x-value
y2<-10+3*xnew+rnorm(50,sd=2)
plot(xnew,y2)
lines(xnew,lm(y2~xnew)$fit)
lines(xnew,10+3*xnew,col=2,lwd=2)
points(xnew[50],y2[50],pch=8,col=2)
###################################################
### Fig 7c
###################################################
y2<-10+3*x+rnorm(50,sd=2)
y2[50]<-y2[50]-20  ## creating an extreme y-value for an extreme x
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
points(x[50],y2[50],pch=8,col=2)
###################################################
### Fig 7d
###################################################
y2<-10+3*x+rnorm(50,sd=2)
y2[20]<-y2[20]-15 ## creating an extreme y-value for an x near mean(x)
plot(x,y2)
lines(x,lm(y2~x)$fit)
lines(x,10+3*x,col=2,lwd=2)
points(x[20],y2[20],pch=8,col=2)
par(mfrow=c(1,3))
###################################################
### Fig 8a
###################################################
x<-sort(rnorm(25))
x2<-c(x,sort(rnorm(25))+5)
y1<-10+3*x+rnorm(25,sd=2)
y2<-3+x2+rnorm(25) ## creating 2 groups of responses
plot(c(x,x2),c(y1,y2))
###################################################
### Fig 8b
###################################################
x<-sort(rexp(50,.1)) ## uneven spread in x
y2<-10+3*x+rnorm(50,sd=5)
plot(x,y2)
###################################################
### Fig 8c
###################################################
x<-rnorm(50)
y2<-10+3*x+rnorm(50,sd=2)
plot(x,y2,xlim=c(-5,10),ylim=c(-5,40))
lines(x,lm(y2~x)$fit)
lines(seq(-5,10),10+3*seq(-5,10),col=2,lwd=2) ## looking at the model outside observed range of x
plot(log10(mydata$sqft_lot),mydata$bedrooms)
par(mfrow=c(2,2))
mm5=lm(mydata$bedrooms~log10(mydata$sqft_lot))
plot(mm5)
summary(mm5)
### MVE155 Statistical Inference
### Assignment 2
### Devosmita Chatterjee
setwd("C:/Users/Acer/Desktop/MVE155/Assignment2")#set current directory
getwd()
mydata=read.csv("whales.txt", quote='\'')#read file
colnames(mydata)=c("t")#column name
#mydata
#str(mydata)
#46a.
#Histogram of the 210 values of t_i
hist(mydata$t, breaks=20, probability = T, plot=T, col="red", xlab=expression('t'[i]), main=expression('Histogram of the 210 values of '*'t'[i]))
#46b.
N=length(mydata$t)
X_bar=mean(mydata$t)
sigma_sq=mean(mydata$t^2) - (mean(mydata$t))^2
alpha_mme=X_bar^2/sigma_sq
lambda_mme=X_bar/sigma_sq
#Fit the parameters of the gamma distribution by the method of moments
alpha_mme
lambda_mme
#46c.
library(fitdistrplus)
para_mle=fitdist(mydata$t, "gamma", method="mle", start = list(shape = 0.7991741, rate = 1.318771))
#para_mle
alpha_mle=para_mle$estimate["shape"]
lambda_mle=para_mle$estimate["rate"]
#Fit the parameters of the gamma distribution by maximum likelihood
alpha_mle
lambda_mle
#46d.
x=seq(0,5,0.01)
y_mme=dgamma(x,alpha_mme,lambda_mme)
y_mle=dgamma(x,alpha_mle,lambda_mle)
#Plot the two gamma densities on top of the histogram
hist(mydata$t, breaks=20, probability = T,plot=T, col="red", xlab=expression('t'[i]), main=expression('Histogram of the 210 values of '*'t'[i]))
lines( sort(x) , y_mme, col = "blue" , lty = 2 , lwd = 2 )
lines( sort(x) , y_mle, col = "green" ,lwd = 2 )
legend("topright", legend=c("MME", "MLE"),
col=c("blue", "green"), lty=2:1, lwd = 2, cex=1)
#46e.
#46e.
n=3000
B=1000
y = matrix(0,B,n)
lambda_boot_mme=numeric(B)
alpha_boot_mme=numeric(B)
set.seed(1)
for(i in 1:B){
y[i,] = rgamma(n,alpha_mme,lambda_mme)
x_bar = mean(y[i,])
sigma_sq=mean(y[i,]^2) - (mean(y[i,]))^2
alpha_boot_mme[i] = x_bar^2/sigma_sq
lambda_boot_mme[i] = x_bar/sigma_sq
}
#Estimate the sampling distributions and the standard errors of the parameters fit by the method of moments by using the bootstrap
hist(alpha_boot_mme, breaks=15, probability = T, plot=T, col="red")
alpha_boot_mme_mean=mean(alpha_boot_mme)
alpha_boot_mme_mean
alpha_boot_mme_var=((B-1)/B)*var(alpha_boot_mme)
alpha_boot_mme_sd=sqrt(alpha_boot_mme_var)
alpha_boot_mme_sd
hist(lambda_boot_mme, breaks=15, probability = T, plot=T, col="red")
lambda_boot_mme_mean=mean(lambda_boot_mme)
lambda_boot_mme_mean
lambda_boot_mme_var=((B-1)/B)*var(lambda_boot_mme)
lambda_boot_mme_sd=sqrt(lambda_boot_mme_var)
lambda_boot_mme_sd
#46f.
n=3000
B=1000
y = matrix(0,B,n)
lambda_boot_mle=numeric(B)
alpha_boot_mle=numeric(B)
set.seed(1)
for(i in 1:B){
y[i,] = rgamma(n, alpha_mle, lambda_mle)
para_boot_mle=fitdist(y[i,], "gamma", method="mle", start = list(shape = alpha_boot_mme[i], rate = lambda_boot_mme[i]))
alpha_boot_mle[i]=para_boot_mle$estimate["shape"]
lambda_boot_mle[i]=para_boot_mle$estimate["rate"]
}
#Estimate the sampling distributions and the standard errors of the parameters fit by maximum likelihood by using the bootstrap
hist(alpha_boot_mle, breaks=15, probability = T, plot=T, col="red")
alpha_boot_mle_mean=mean(alpha_boot_mle)
alpha_boot_mle_mean
alpha_boot_mle_var=((B-1)/B)*var(alpha_boot_mle)
alpha_boot_mle_sd=sqrt(alpha_boot_mle_var)
alpha_boot_mle_sd
hist(lambda_boot_mle, breaks=15, probability = T, plot=T, col="red")
lambda_boot_mle_mean=mean(lambda_boot_mle)
lambda_boot_mle_mean
lambda_boot_mle_var=((B-1)/B)*var(lambda_boot_mle)
lambda_boot_mle_sd=sqrt(lambda_boot_mle_var)
lambda_boot_mle_sd
#46g.
#Approximate confidence intervals for the parameters estimated by maximum likelihood
I_alpha_boot_mle.L=alpha_boot_mle_mean-1.96*alpha_boot_mle_sd
I_alpha_boot_mle.L
I_alpha_boot_mle.U=alpha_boot_mle_mean+1.96*alpha_boot_mle_sd
I_alpha_boot_mle.U
I_lambda_boot_mle.L=lambda_boot_mle_mean-1.96*lambda_boot_mle_sd
I_lambda_boot_mle.L
I_lambda_boot_mle.U=lambda_boot_mle_mean+1.96*lambda_boot_mle_sd
I_lambda_boot_mle.U
#Approximate confidence intervals for the parameters estimated by the method of moments
I_alpha_boot_mme.L=alpha_boot_mme_mean-1.96*alpha_boot_mme_sd
I_alpha_boot_mme.L
I_alpha_boot_mme.U=alpha_boot_mme_mean+1.96*alpha_boot_mme_sd
I_alpha_boot_mme.U
I_lambda_boot_mme.L=lambda_boot_mme_mean-1.96*lambda_boot_mme_sd
I_lambda_boot_mme.L
I_lambda_boot_mme.U=lambda_boot_mme_mean+1.96*lambda_boot_mme_sd
I_lambda_boot_mme.U
